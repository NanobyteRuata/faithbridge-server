// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id   Int    @id @default(autoincrement())
  name String
  code String @unique

  users             User[]
  roles             Role[]
  permissions       Permission[]
  profiles          Profile[]
  households        Household[]
  memberships       Membership[]
  statuses          Status[]
  addresses         Address[]
  activityLogs      ActivityLog[]
  relationshipTypes RelationshipType[]
  relationships     Relationship[]
  accessCodes       AccessCode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             Int           @id @default(autoincrement())
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  email              String
  phone              String?
  username           String
  password           String
  resetCode          String?
  resetCodeExpiresAt DateTime?
  isActive           Boolean   @default(true)
  isSuperAdmin       Boolean   @default(false)

  sessions Session[]

  roleId Int?
  role   Role? @relation(fields: [roleId], references: [id], onDelete: Restrict)

  profileId Int     @unique
  profile   Profile @relation("UserProfile", fields: [profileId], references: [id], onDelete: Restrict)

  activityLogs ActivityLog[]

  createdById  Int?
  createdBy    User?  @relation("UserCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  createdUsers User[] @relation("UserCreatedBy")

  createdAt DateTime @default(now())

  updatedById  Int?
  updatedBy    User?  @relation("UserUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  updatedUsers User[] @relation("UserUpdatedBy")

  updatedAt DateTime? @updatedAt

  // Role relations
  createdRoles Role[] @relation("RoleCreatedBy")
  updatedRoles Role[] @relation("RoleUpdatedBy")

  // Permission relations
  createdPermissions Permission[] @relation("PermissionCreatedBy")
  updatedPermissions Permission[] @relation("PermissionUpdatedBy")

  // ActivityLog relations
  createdActivityLogs ActivityLog[] @relation("ActivityLogCreatedBy")
  updatedActivityLogs ActivityLog[] @relation("ActivityLogUpdatedBy")

  // Profile relations
  createdProfiles Profile[] @relation("ProfileCreatedBy")
  updatedProfiles Profile[] @relation("ProfileUpdatedBy")

  // Status relations
  createdStatuses Status[] @relation("StatusCreatedBy")
  updatedStatuses Status[] @relation("StatusUpdatedBy")

  // Household relations
  createdHouseholds Household[] @relation("HouseholdCreatedBy")
  updatedHouseholds Household[] @relation("HouseholdUpdatedBy")

  // Membership relations
  createdMemberships Membership[] @relation("MembershipCreatedBy")
  updatedMemberships Membership[] @relation("MembershipUpdatedBy")

  // RelationshipType relations
  createdRelationshipTypes RelationshipType[] @relation("RelationshipTypeCreatedBy")
  updatedRelationshipTypes RelationshipType[] @relation("RelationshipTypeUpdatedBy")

  // Relationship relations
  createdRelationships Relationship[] @relation("RelationshipCreatedBy")
  updatedRelationships Relationship[] @relation("RelationshipUpdatedBy")

  // AccessCode relations
  createdAccessCodes AccessCode[] @relation("AccessCodeCreatedBy")
  updatedAccessCodes AccessCode[] @relation("AccessCodeUpdatedBy")

  @@unique([email, organizationId])
  @@unique([phone, organizationId])
  @@unique([username, organizationId])
  @@index([organizationId])
}

model Permission {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  action      String
  resource    String
  description String?

  roles Role[]

  createdById Int?
  createdBy   User? @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  updatedById Int?
  updatedBy   User? @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  updatedAt DateTime? @updatedAt

  @@unique([action, resource, organizationId], name: "action_resource_org")
  @@index([organizationId])
}

model Role {
  id             Int           @id @default(autoincrement())
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  name        String
  permissions Permission[]
  users       User[]
  accessCodes AccessCode[]
  isSuperRole Boolean      @default(false)

  createdById Int?
  createdBy   User? @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  updatedById Int?
  updatedBy   User? @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  updatedAt DateTime? @updatedAt

  @@unique([name, organizationId])
  @@index([organizationId])
}

model ActivityLog {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  actorId     Int
  actor       User    @relation(fields: [actorId], references: [id], onDelete: Cascade)
  action      String
  description String?
  resource    String?
  resourceId  Int?
  changes     Json?

  createdById Int?
  createdBy   User? @relation("ActivityLogCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  updatedById Int?
  updatedBy   User? @relation("ActivityLogUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  updatedAt DateTime? @updatedAt

  @@index([organizationId])
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refreshToken String   @unique
  deviceId     String
  userAgent    String?
  ipAddress    String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Profile {
  id             Int           @id @default(autoincrement())
  organizationId Int?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  title    String
  name     String
  lastName String?
  nickName String?

  statusId Int?
  status   Status? @relation(fields: [statusId], references: [id], onDelete: SetNull)

  user User? @relation("UserProfile")

  membershipId Int?
  membership   Membership? @relation(fields: [membershipId], references: [id], onDelete: Restrict)

  personalEmail String?
  workEmail     String?

  personalPhone String?
  workPhone     String?

  otherContact1Type String?
  otherContact1     String?
  otherContact2Type String?
  otherContact2     String?
  otherContact3Type String?
  otherContact3     String?

  householdId     Int?
  household       Household? @relation("HouseholdProfile", fields: [householdId], references: [id], onDelete: SetNull)
  headOfHousehold Household? @relation("HouseholdHeadProfile")
  address         Address[]

  relationships Relationship[] @relation("ProfileRelationship")
  relatedTo     Relationship[] @relation("ProfileRelated")

  createdById Int?
  createdBy   User? @relation("ProfileCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  updatedById Int?
  updatedBy   User? @relation("ProfileUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  updatedAt DateTime @updatedAt

  @@index([organizationId])
}

model Status {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  name        String
  description String?

  profiles Profile[]

  createdById Int?
  createdBy   User? @relation("StatusCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  updatedById Int?
  updatedBy   User? @relation("StatusUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  updatedAt DateTime @updatedAt

  @@unique([name, organizationId])
}

model Address {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  household Household?
  profiles  Profile[]

  room     String?
  building String?
  street   String
  township String
  city     String
  state    String
  zip      String?
  country  String

  @@index([organizationId])
}

model Household {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  name          String
  description   String?
  headProfileId Int?      @unique
  headProfile   Profile?  @relation("HouseholdHeadProfile", fields: [headProfileId], references: [id], onDelete: Restrict)
  profiles      Profile[] @relation("HouseholdProfile")

  addressId Int?     @unique
  address   Address? @relation(fields: [addressId], references: [id], onDelete: SetNull)

  createdById Int?
  createdBy   User? @relation("HouseholdCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  updatedById Int?
  updatedBy   User? @relation("HouseholdUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  updatedAt DateTime @updatedAt
}

model Membership {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  name        String
  description String?
  profiles    Profile[]

  createdById Int?
  createdBy   User? @relation("MembershipCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  updatedById Int?
  updatedBy   User? @relation("MembershipUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  updatedAt DateTime @updatedAt

  @@unique([name, organizationId])
}

model RelationshipType {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  code        String
  name        String
  description String?

  relationships Relationship[]

  inverseRelationshipTypeId Int?
  inverseRelationshipType   RelationshipType?  @relation("InverseRelationshipType", fields: [inverseRelationshipTypeId], references: [id], onDelete: SetNull)
  inverseOf                 RelationshipType[] @relation("InverseRelationshipType")

  createdById Int?
  createdBy   User? @relation("RelationshipTypeCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  updatedById Int?
  updatedBy   User? @relation("RelationshipTypeUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  updatedAt DateTime @updatedAt

  @@unique([code, organizationId])
}

model Relationship {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  profileId          Int
  profile            Profile          @relation("ProfileRelationship", fields: [profileId], references: [id], onDelete: Cascade)
  relatedProfileId   Int
  relatedProfile     Profile          @relation("ProfileRelated", fields: [relatedProfileId], references: [id], onDelete: Cascade)
  relationshipTypeId Int
  relationshipType   RelationshipType @relation(fields: [relationshipTypeId], references: [id], onDelete: Restrict)

  createdById Int?
  createdBy   User? @relation("RelationshipCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  updatedById Int?
  updatedBy   User? @relation("RelationshipUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)

  updatedAt DateTime @updatedAt

  @@unique([profileId, relatedProfileId], name: "profile_related")
}

model AccessCode {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  name       String
  hashedCode String @unique

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: Restrict)

  expireDate DateTime?
  isActive   Boolean   @default(false)

  createdById Int?
  createdBy   User? @relation("AccessCodeCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  createdAt   DateTime @default(now())
  updatedById Int?
  updatedBy   User?    @relation("AccessCodeUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull)
  updatedAt   DateTime @updatedAt

  @@unique([hashedCode, organizationId])
}
